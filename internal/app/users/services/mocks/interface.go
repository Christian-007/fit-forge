// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mocks/interface.go
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	dto "github.com/Christian-007/fit-forge/internal/app/users/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
	isgomock struct{}
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserService) Create(createUserRequest dto.CreateUserRequest) (dto.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", createUserRequest)
	ret0, _ := ret[0].(dto.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserServiceMockRecorder) Create(createUserRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserService)(nil).Create), createUserRequest)
}

// CreateWithInitialPoints mocks base method.
func (m *MockUserService) CreateWithInitialPoints(ctx context.Context, createUserRequest dto.CreateUserRequest) (dto.UserWithPointsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithInitialPoints", ctx, createUserRequest)
	ret0, _ := ret[0].(dto.UserWithPointsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithInitialPoints indicates an expected call of CreateWithInitialPoints.
func (mr *MockUserServiceMockRecorder) CreateWithInitialPoints(ctx, createUserRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithInitialPoints", reflect.TypeOf((*MockUserService)(nil).CreateWithInitialPoints), ctx, createUserRequest)
}

// Delete mocks base method.
func (m *MockUserService) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserServiceMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserService)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockUserService) GetAll() ([]dto.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]dto.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUserServiceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUserService)(nil).GetAll))
}

// GetOne mocks base method.
func (m *MockUserService) GetOne(id int) (dto.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", id)
	ret0, _ := ret[0].(dto.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockUserServiceMockRecorder) GetOne(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockUserService)(nil).GetOne), id)
}

// GetOneByEmail mocks base method.
func (m *MockUserService) GetOneByEmail(email string) (dto.GetUserByEmailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneByEmail", email)
	ret0, _ := ret[0].(dto.GetUserByEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneByEmail indicates an expected call of GetOneByEmail.
func (mr *MockUserServiceMockRecorder) GetOneByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneByEmail", reflect.TypeOf((*MockUserService)(nil).GetOneByEmail), email)
}

// UpdateOne mocks base method.
func (m *MockUserService) UpdateOne(id int, updateUserRequest dto.UpdateUserRequest) (dto.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOne", id, updateUserRequest)
	ret0, _ := ret[0].(dto.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockUserServiceMockRecorder) UpdateOne(id, updateUserRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockUserService)(nil).UpdateOne), id, updateUserRequest)
}

// UpdateOneByEmail mocks base method.
func (m *MockUserService) UpdateOneByEmail(email string, updateUserRequest dto.UpdateUserRequest) (dto.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOneByEmail", email, updateUserRequest)
	ret0, _ := ret[0].(dto.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOneByEmail indicates an expected call of UpdateOneByEmail.
func (mr *MockUserServiceMockRecorder) UpdateOneByEmail(email, updateUserRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOneByEmail", reflect.TypeOf((*MockUserService)(nil).UpdateOneByEmail), email, updateUserRequest)
}
