// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mocks/interface.go
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	rsa "crypto/rsa"
	reflect "reflect"

	domains "github.com/Christian-007/fit-forge/internal/app/auth/domains"
	dto "github.com/Christian-007/fit-forge/internal/app/auth/dto"
	dto0 "github.com/Christian-007/fit-forge/internal/app/users/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAuthService) Authenticate(loginRequest dto.LoginRequest) (dto0.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", loginRequest)
	ret0, _ := ret[0].(dto0.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthServiceMockRecorder) Authenticate(loginRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthService)(nil).Authenticate), loginRequest)
}

// CreateToken mocks base method.
func (m *MockAuthService) CreateToken(privateKey *rsa.PrivateKey, userId int) (domains.AuthToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", privateKey, userId)
	ret0, _ := ret[0].(domains.AuthToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockAuthServiceMockRecorder) CreateToken(privateKey, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockAuthService)(nil).CreateToken), privateKey, userId)
}

// GetAuthDataFromCache mocks base method.
func (m *MockAuthService) GetAuthDataFromCache(accessTokenUuid string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthDataFromCache", accessTokenUuid)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthDataFromCache indicates an expected call of GetAuthDataFromCache.
func (mr *MockAuthServiceMockRecorder) GetAuthDataFromCache(accessTokenUuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthDataFromCache", reflect.TypeOf((*MockAuthService)(nil).GetAuthDataFromCache), accessTokenUuid)
}

// GetHashAuthDataFromCache mocks base method.
func (m *MockAuthService) GetHashAuthDataFromCache(accessTokenUuid string) (domains.AuthData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHashAuthDataFromCache", accessTokenUuid)
	ret0, _ := ret[0].(domains.AuthData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHashAuthDataFromCache indicates an expected call of GetHashAuthDataFromCache.
func (mr *MockAuthServiceMockRecorder) GetHashAuthDataFromCache(accessTokenUuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHashAuthDataFromCache", reflect.TypeOf((*MockAuthService)(nil).GetHashAuthDataFromCache), accessTokenUuid)
}

// InvalidateToken mocks base method.
func (m *MockAuthService) InvalidateToken(accessTokenUuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateToken", accessTokenUuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateToken indicates an expected call of InvalidateToken.
func (mr *MockAuthServiceMockRecorder) InvalidateToken(accessTokenUuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateToken", reflect.TypeOf((*MockAuthService)(nil).InvalidateToken), accessTokenUuid)
}

// SaveToken mocks base method.
func (m *MockAuthService) SaveToken(userResponse dto0.UserResponse, authToken domains.AuthToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveToken", userResponse, authToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveToken indicates an expected call of SaveToken.
func (mr *MockAuthServiceMockRecorder) SaveToken(userResponse, authToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveToken", reflect.TypeOf((*MockAuthService)(nil).SaveToken), userResponse, authToken)
}

// ValidateToken mocks base method.
func (m *MockAuthService) ValidateToken(privateKey *rsa.PrivateKey, tokenString string) (*domains.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", privateKey, tokenString)
	ret0, _ := ret[0].(*domains.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockAuthServiceMockRecorder) ValidateToken(privateKey, tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockAuthService)(nil).ValidateToken), privateKey, tokenString)
}
