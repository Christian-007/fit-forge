// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mocks/interface.go
//

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"

	domains "github.com/Christian-007/fit-forge/internal/app/todos/domains"
	gomock "go.uber.org/mock/gomock"
)

// MockTodoRepository is a mock of TodoRepository interface.
type MockTodoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTodoRepositoryMockRecorder
}

// MockTodoRepositoryMockRecorder is the mock recorder for MockTodoRepository.
type MockTodoRepositoryMockRecorder struct {
	mock *MockTodoRepository
}

// NewMockTodoRepository creates a new mock instance.
func NewMockTodoRepository(ctrl *gomock.Controller) *MockTodoRepository {
	mock := &MockTodoRepository{ctrl: ctrl}
	mock.recorder = &MockTodoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoRepository) EXPECT() *MockTodoRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTodoRepository) Create(userId int, todo domains.TodoModel) (domains.TodoModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userId, todo)
	ret0, _ := ret[0].(domains.TodoModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTodoRepositoryMockRecorder) Create(userId, todo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTodoRepository)(nil).Create), userId, todo)
}

// CreateWithPoints mocks base method.
func (m *MockTodoRepository) CreateWithPoints(ctx context.Context, userId int, todo domains.TodoModel) (domains.TodoWithPoints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithPoints", ctx, userId, todo)
	ret0, _ := ret[0].(domains.TodoWithPoints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithPoints indicates an expected call of CreateWithPoints.
func (mr *MockTodoRepositoryMockRecorder) CreateWithPoints(ctx, userId, todo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithPoints", reflect.TypeOf((*MockTodoRepository)(nil).CreateWithPoints), ctx, userId, todo)
}

// Delete mocks base method.
func (m *MockTodoRepository) Delete(todoId, userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", todoId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTodoRepositoryMockRecorder) Delete(todoId, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTodoRepository)(nil).Delete), todoId, userId)
}

// GetAll mocks base method.
func (m *MockTodoRepository) GetAll() ([]domains.TodoModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]domains.TodoModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTodoRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTodoRepository)(nil).GetAll))
}

// GetAllByUserId mocks base method.
func (m *MockTodoRepository) GetAllByUserId(userId int) ([]domains.TodoModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByUserId", userId)
	ret0, _ := ret[0].([]domains.TodoModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByUserId indicates an expected call of GetAllByUserId.
func (mr *MockTodoRepositoryMockRecorder) GetAllByUserId(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByUserId", reflect.TypeOf((*MockTodoRepository)(nil).GetAllByUserId), userId)
}

// GetOneByUserId mocks base method.
func (m *MockTodoRepository) GetOneByUserId(userId, todoId int) (domains.TodoModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneByUserId", userId, todoId)
	ret0, _ := ret[0].(domains.TodoModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneByUserId indicates an expected call of GetOneByUserId.
func (mr *MockTodoRepositoryMockRecorder) GetOneByUserId(userId, todoId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneByUserId", reflect.TypeOf((*MockTodoRepository)(nil).GetOneByUserId), userId, todoId)
}
